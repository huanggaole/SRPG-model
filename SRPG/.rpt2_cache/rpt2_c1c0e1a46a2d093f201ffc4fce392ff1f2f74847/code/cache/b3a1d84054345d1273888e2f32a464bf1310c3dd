{
  "code": "import Map from \"../data/Map\";\r\nexport default class MapScript extends Laya.Script {\r\n    constructor() {\r\n        super();\r\n        this.terrainImages = [];\r\n        let terrainpaths = [\r\n            \"comp/terrain_deepwater.png\",\r\n            \"comp/terrain_shallowwater.png\",\r\n            \"comp/terrain_plain.png\",\r\n            \"comp/terrain_grass.png\",\r\n            \"comp/terrain_road.png\"\r\n        ];\r\n        for (let i = 0; i < terrainpaths.length; i++) {\r\n            this.terrainImages.push(new Laya.Image(terrainpaths[i]));\r\n        }\r\n    }\r\n    onStart() {\r\n    }\r\n    onRefresh() {\r\n        let image = this.owner;\r\n        image.graphics.clear();\r\n        image.size(Map.width * Map.tilewidth, Map.height * Map.tileheight);\r\n        for (let i = 0; i < Map.height; i++) {\r\n            for (let j = 0; j < Map.width; j++) {\r\n                image.graphics.drawImage(this.terrainImages[Map.terrianarray[i][j]].source, j * Map.tilewidth, i * Map.tileheight, Map.tilewidth, Map.tileheight);\r\n            }\r\n        }\r\n    }\r\n    onMouseDown() {\r\n        this.lastX = Laya.stage.mouseX;\r\n        this.lastY = Laya.stage.mouseY;\r\n        this.ifMove = true;\r\n        this.presstime = new Date();\r\n    }\r\n    onMouseUp() {\r\n        this.ifMove = false;\r\n        let nowtime = new Date();\r\n        let deltime = null;\r\n        if (this.presstime) {\r\n            deltime = nowtime.getTime() - this.presstime.getTime();\r\n            this.presstime = null;\r\n        }\r\n        const image = this.owner;\r\n        if (deltime && deltime < 200) {\r\n            let newx = image.pivotX + (Laya.stage.mouseX - image.x) / image.scaleX - Map.tilewidth / 2.0;\r\n            let newy = image.pivotY + (Laya.stage.mouseY - image.y) / image.scaleY - Map.tileheight / 2.0;\r\n            image.pivotX = newx;\r\n            image.pivotY = newy;\r\n        }\r\n        let roundx = Math.round(image.pivotX / Map.tilewidth);\r\n        let roundy = Math.round(image.pivotY / Map.tileheight);\r\n        if (roundx < 0)\r\n            roundx = 0;\r\n        if (roundx >= Map.width)\r\n            roundx = Map.width - 1;\r\n        if (roundy < 0)\r\n            roundy = 0;\r\n        if (roundy >= Map.height)\r\n            roundy = Map.height - 1;\r\n        let newx = roundx * Map.tilewidth;\r\n        let newy = roundy * Map.tileheight;\r\n        Laya.Tween.to(image, { pivotX: newx, pivotY: newy }, 100);\r\n    }\r\n    onMouseOut() {\r\n        this.onMouseUp();\r\n    }\r\n    onMouseMove() {\r\n        if (this.ifMove) {\r\n            let currentX = Laya.stage.mouseX;\r\n            let currentY = Laya.stage.mouseY;\r\n            let image = this.owner;\r\n            image.pivotX -= (currentX - this.lastX) / image.scaleX;\r\n            image.pivotY -= (currentY - this.lastY) / image.scaleY;\r\n            this.lastX = currentX;\r\n            this.lastY = currentY;\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "/Users/huanggaole/SRPG-model/SRPG/src/data/Map.ts"
  ]
}
